# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
enum Gender {
  MALE
  FEMAIL
  OTHER
}
enum MaritalStatus {
  SINGLE
  MARRIED
  SEPARATED
}
type S3Object {
  bucket: String!
  key: String!
  region: String!
}
type User @model @auth(rules: [{ allow: owner, operations: [read, update, create] }]) {
  id: ID!
  name: String!
  family_name: String!
  email: String! @index(name: "byEmail", queryField: "userByEmail")
  owner: String!
  avatarUrl: String
  avatarKey: String
  wallpaperUrl: String
  wallpaperKey: String
  posts: [Post] @hasMany
  comments: [Comment] @hasMany
}
type Person
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  ssn_number: String
  school_number: String
  name: String!
  second_name: String
  last_name: String!
  birth_date: String
  gender: Gender
  student_picture: String
  occupation: String
  graduation_period: String
  graduation_status: String
  education_status: String
  marital_status: MaritalStatus
  phone_number: String
  email: String
  linkedin_url: String
  twitter_url: String
  facebook_url: String
}
type Post
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  type: String! @index(name: "byDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  content: String!
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  createdAt: String!
}
type Comment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
  postID: ID! @index(name: "byPost")
  post: Post! @belongsTo(fields: ["postID"])
  userID: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userID"])
}

# type Query {
#   getUserPicture(picture: String): String @function(name: "getUserPicture-${env}")
# }
